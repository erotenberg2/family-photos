<div id="title_bar">
  <div id="titlebar_left">
    <h2 id="page_title">Import Photos</h2>
  </div>
  <div id="titlebar_right">
    <%= link_to "Back to Photos", family_photos_path, class: "button" %>
  </div>
</div>

<div class="import_photos_form">
  <%= form_with url: import_photos_family_photos_path, method: :post, multipart: true, local: true, html: { id: 'import-photos-form' } do |f| %>
    
    <div class="panel">
      <h3>Select a Directory of Photos</h3>
      <p>Choose a folder containing image files. All valid image files (JPEG, PNG, GIF, etc.) will be imported.</p>
      
      <div class="form_group">
        <label for="directory-input">Select Directory:</label>
        <input type="file" 
               id="directory-input" 
               webkitdirectory 
               directory 
               multiple 
               accept="image/*"
               style="margin: 10px 0;">
        
        <!-- Hidden container for filtered files that will actually be submitted -->
        <div id="filtered-files-container" style="display: none;"></div>
      </div>
      
      <!-- Scanning progress indicator -->
      <div id="scanning-progress" style="margin: 20px 0; display: none;">
        <h4>Scanning Directory...</h4>
        <div style="background: #f0f0f0; border-radius: 10px; padding: 3px; margin: 10px 0;">
          <div id="progress-bar" style="background: #007cba; height: 20px; border-radius: 8px; width: 0%; transition: width 0.3s ease;"></div>
        </div>
        <p id="progress-text" style="font-size: 14px; color: #666; margin: 5px 0;">Preparing to scan files...</p>
        <p style="font-size: 12px; color: #999;">Please wait while we process the directory contents.</p>
      </div>

      <div id="file-preview" style="margin: 20px 0; display: none;">
        <h4>Files to Import:</h4>
        <div id="file-list" style="max-height: 300px; overflow-y: auto; border: 1px solid #ddd; padding: 10px; background: #f9f9f9;">
        </div>
        <p id="file-count" style="font-weight: bold; margin-top: 10px;"></p>
      </div>
      
      <div class="form_actions">
        <%= f.submit "Import Photos", class: "btn btn-primary", id: "import-button", disabled: true %>
        <%= link_to "Cancel", family_photos_path, class: "btn btn-secondary" %>
      </div>
    </div>
    
  <% end %>
</div>

<style>
.import_photos_form {
  max-width: 800px;
  margin: 20px auto;
}

.panel {
  background: white;
  padding: 20px;
  border-radius: 5px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.form_group {
  margin: 15px 0;
}

.form_group label {
  display: block;
  font-weight: bold;
  margin-bottom: 5px;
}

.form_actions {
  margin-top: 20px;
  text-align: right;
}

.btn {
  padding: 10px 20px;
  margin: 0 5px;
  border: none;
  border-radius: 3px;
  cursor: pointer;
  text-decoration: none;
  display: inline-block;
}

.btn-primary {
  background: #007cba;
  color: white;
}

.btn-primary:disabled {
  background: #ccc;
  cursor: not-allowed;
}

.btn-secondary {
  background: #666;
  color: white;
}

.file-item {
  padding: 5px;
  border-bottom: 1px solid #eee;
  display: flex;
  justify-content: space-between;
}

.file-item:last-child {
  border-bottom: none;
}

.file-name {
  font-weight: bold;
}

.file-size {
  color: #666;
  font-size: 0.9em;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const directoryInput = document.getElementById('directory-input');
  const filePreview = document.getElementById('file-preview');
  const fileList = document.getElementById('file-list');
  const fileCount = document.getElementById('file-count');
  const importButton = document.getElementById('import-button');
  
  // Show progress immediately when directory input is clicked
  directoryInput.addEventListener('click', function(e) {
    const scanningProgress = document.getElementById('scanning-progress');
    const progressBar = document.getElementById('progress-bar');
    const progressText = document.getElementById('progress-text');
    
    // Show progress immediately
    scanningProgress.style.display = 'block';
    filePreview.style.display = 'none';
    importButton.disabled = true;
    
    progressBar.style.width = '5%';
    progressText.textContent = 'Reading directory structure...';
  });

  directoryInput.addEventListener('change', function(e) {
    const scanningProgress = document.getElementById('scanning-progress');
    const progressBar = document.getElementById('progress-bar');
    const progressText = document.getElementById('progress-text');
    
    // Keep progress visible and update
    progressBar.style.width = '15%';
    progressText.textContent = 'Directory loaded, analyzing files...';
    
    // Use requestAnimationFrame to ensure UI updates
    requestAnimationFrame(() => {
      const files = Array.from(e.target.files);
      
      if (files.length === 0) {
        scanningProgress.style.display = 'none';
        return;
      }
      
      progressText.textContent = `Analyzing ${files.length} files...`;
      progressBar.style.width = '20%';
      
      // Define acceptable image MIME types
      const acceptableImageTypes = [
        'image/jpeg',
        'image/jpg', 
        'image/png',
        'image/gif',
        'image/bmp',
        'image/tiff',
        'image/webp',
        'image/heic',
        'image/heif'
      ];
      
      // Process files in smaller batches with faster updates
      const imageFiles = [];
      const batchSize = 25; // Smaller batches for more responsive updates
      let processedCount = 0;
      
      function processBatch(startIndex) {
        const endIndex = Math.min(startIndex + batchSize, files.length);
        const startTime = performance.now();
        
        for (let i = startIndex; i < endIndex; i++) {
          const file = files[i];
          
          // Quick check - just extension for speed
          const extension = file.name.toLowerCase().split('.').pop();
          const acceptableExtensions = ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'tiff', 'tif', 'webp', 'heic', 'heif'];
          
          if (acceptableExtensions.includes(extension)) {
            imageFiles.push(file);
          }
          
          processedCount++;
          
          // Break if processing is taking too long (>5ms)
          if (performance.now() - startTime > 5) {
            break;
          }
        }
        
        // Update progress more smoothly
        const progress = Math.min((processedCount / files.length) * 75 + 20, 95); // 20-95%
        progressBar.style.width = progress + '%';
        progressText.textContent = `Processed ${processedCount} of ${files.length} files... (${imageFiles.length} images found)`;
        
        if (processedCount < files.length) {
          // Continue processing next batch immediately
          requestAnimationFrame(() => processBatch(processedCount));
        } else {
          // Finished processing all files
          requestAnimationFrame(() => buildFileList(imageFiles, files.length));
        }
      }
      
      // Start processing with a small delay to show the updated progress
      setTimeout(() => processBatch(0), 50);
    });
  });
  
  function buildFileList(imageFiles, totalFiles) {
    const scanningProgress = document.getElementById('scanning-progress');
    const progressBar = document.getElementById('progress-bar');
    const progressText = document.getElementById('progress-text');
    const filteredContainer = document.getElementById('filtered-files-container');
    
    // Clear previous filtered files
    filteredContainer.innerHTML = '';
    
    progressBar.style.width = '95%';
    progressText.textContent = 'Building file list...';
    
    if (imageFiles.length > 0) {
      fileList.innerHTML = '';
      
      // Process DOM creation in batches to maintain responsiveness
      const domBatchSize = 20; // Create 20 elements at a time
      let processedFiles = 0;
      
      function createBatch(startIndex) {
        const endIndex = Math.min(startIndex + domBatchSize, imageFiles.length);
        const fragment = document.createDocumentFragment();
        const hiddenFragment = document.createDocumentFragment();
        
        for (let i = startIndex; i < endIndex; i++) {
          const file = imageFiles[i];
          
          // Create the display item
          const fileItem = document.createElement('div');
          fileItem.className = 'file-item';
          
          const fileName = document.createElement('span');
          fileName.className = 'file-name';
          fileName.textContent = file.webkitRelativePath || file.name;
          
          const fileSize = document.createElement('span');
          fileSize.className = 'file-size';
          fileSize.textContent = formatFileSize(file.size);
          
          fileItem.appendChild(fileName);
          fileItem.appendChild(fileSize);
          fragment.appendChild(fileItem);
          
          // Create hidden file input for this specific file
          const hiddenInput = document.createElement('input');
          hiddenInput.type = 'file';
          hiddenInput.name = `photos[][file]`;
          hiddenInput.style.display = 'none';
          
          // Create a new FileList containing only this file
          const dataTransfer = new DataTransfer();
          dataTransfer.items.add(file);
          hiddenInput.files = dataTransfer.files;
          
          hiddenFragment.appendChild(hiddenInput);
          processedFiles++;
        }
        
        // Append batches to DOM
        fileList.appendChild(fragment);
        filteredContainer.appendChild(hiddenFragment);
        
        // Update progress
        const buildProgress = (processedFiles / imageFiles.length) * 5 + 95; // 95-100%
        progressBar.style.width = buildProgress + '%';
        progressText.textContent = `Building list... (${processedFiles}/${imageFiles.length} files processed)`;
        
        if (endIndex < imageFiles.length) {
          // Continue with next batch
          requestAnimationFrame(() => createBatch(endIndex));
        } else {
          // Finished creating all elements
          finishBuild();
        }
      }
      
      function finishBuild() {
        const skippedFiles = totalFiles - imageFiles.length;
        
        let countText = `${imageFiles.length} image file(s) found`;
        if (skippedFiles > 0) {
          countText += ` (${skippedFiles} non-image file(s) skipped)`;
        }
        fileCount.textContent = countText;
        
        // Complete progress
        progressBar.style.width = '100%';
        progressText.textContent = 'Scan complete!';
        
        // Hide progress and show results
        setTimeout(() => {
          scanningProgress.style.display = 'none';
          filePreview.style.display = 'block';
          importButton.disabled = false;
        }, 500);
      }
      
      // Start building in batches
      requestAnimationFrame(() => createBatch(0));
      
    } else {
      // No valid images found
      fileCount.textContent = `No valid image files found in selected directory (${totalFiles} file(s) skipped)`;
      fileList.innerHTML = '<p style="color: #666; font-style: italic;">No valid image files (.jpg, .png, .gif, .bmp, .tiff, .webp, .heic) found in the selected directory.</p>';
      
      progressBar.style.width = '100%';
      progressText.textContent = 'Scan complete - no images found.';
      
      setTimeout(() => {
        scanningProgress.style.display = 'none';
        filePreview.style.display = 'block';
        importButton.disabled = true;
      }, 500);
    }
  }
  
  function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }
});
</script>
