<div id="title_bar">
  <div id="titlebar_left">
    <h2 id="page_title">Import Photos</h2>
  </div>
  <div id="titlebar_right">
    <%= link_to "Back to Photos", family_photos_path, class: "button" %>
  </div>
</div>

<div class="import_photos_form">
  <%= form_with url: import_photos_family_photos_path, method: :post, multipart: true, local: true, html: { id: 'import-photos-form' } do |f| %>
    
    <div class="panel">
      <h3>Select a Directory of Photos</h3>
      <p>Choose a folder containing image files. All valid image files (JPEG, PNG, GIF, etc.) will be imported in the background.</p>
      
      <div class="form_group">
        <label for="directory-input">Select Directory:</label>
        <input type="file" 
               id="directory-input" 
               name="photos[][file]"
               webkitdirectory 
               directory 
               multiple 
               accept="image/*"
               style="margin: 10px 0;"
               required>
      </div>
      
      <div id="file-preview" style="margin: 20px 0; display: none;">
        <h4>Files Selected:</h4>
        <div id="file-list" style="max-height: 300px; overflow-y: auto; border: 1px solid #ddd; padding: 10px; background: #f9f9f9;">
        </div>
        <p id="file-count" style="font-weight: bold; margin-top: 10px;"></p>
      </div>
      
      <div class="form_actions">
        <%= f.submit "Import Photos", class: "btn btn-primary", id: "import-button", disabled: true %>
        <%= link_to "Cancel", family_photos_path, class: "btn btn-secondary" %>
      </div>
    </div>
    
  <% end %>
</div>

<style>
.import_photos_form {
  max-width: 800px;
  margin: 20px auto;
}

.panel {
  background: white;
  padding: 20px;
  border-radius: 5px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.form_group {
  margin: 15px 0;
}

.form_group label {
  display: block;
  font-weight: bold;
  margin-bottom: 5px;
}

.form_actions {
  margin-top: 20px;
  text-align: right;
}

.btn {
  padding: 10px 20px;
  margin: 0 5px;
  border: none;
  border-radius: 3px;
  cursor: pointer;
  text-decoration: none;
  display: inline-block;
}

.btn-primary {
  background: #007cba;
  color: white;
}

.btn-primary:disabled {
  background: #cccccc;
  cursor: not-allowed;
}

.btn-secondary {
  background: #6c757d;
  color: white;
}

.btn:hover:not(:disabled) {
  opacity: 0.9;
}

.file-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 8px 12px;
  border-bottom: 1px solid #eee;
  background: white;
  margin: 2px 0;
  border-radius: 3px;
}

.file-name {
  flex: 1;
  font-size: 13px;
  word-break: break-all;
}

.file-size {
  font-size: 12px;
  color: #666;
  margin-left: 10px;
  white-space: nowrap;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const directoryInput = document.getElementById('directory-input');
  const filePreview = document.getElementById('file-preview');
  const fileList = document.getElementById('file-list');
  const fileCount = document.getElementById('file-count');
  const importButton = document.getElementById('import-button');
  
  directoryInput.addEventListener('change', function(e) {
    const files = Array.from(e.target.files);
    const totalFiles = files.length;
    
    if (totalFiles === 0) {
      filePreview.style.display = 'none';
      importButton.disabled = true;
      return;
    }
    
    // Count image files
    const validExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff', '.tif', '.webp', '.heic', '.heif'];
    const imageFiles = files.filter(file => {
      const fileName = file.name.toLowerCase();
      return validExtensions.some(ext => fileName.endsWith(ext)) && file.type.startsWith('image/');
    });
    
    // Show file preview
    if (imageFiles.length > 0) {
      fileList.innerHTML = '';
      
      // Show first 20 files as preview
      const previewFiles = imageFiles.slice(0, 20);
      previewFiles.forEach(file => {
        const fileItem = document.createElement('div');
        fileItem.className = 'file-item';
        
        const fileName = document.createElement('span');
        fileName.className = 'file-name';
        fileName.textContent = file.webkitRelativePath || file.name;
        
        const fileSize = document.createElement('span');
        fileSize.className = 'file-size';
        fileSize.textContent = formatFileSize(file.size);
        
        fileItem.appendChild(fileName);
        fileItem.appendChild(fileSize);
        fileList.appendChild(fileItem);
      });
      
      if (imageFiles.length > 20) {
        const moreItem = document.createElement('div');
        moreItem.style.cssText = 'padding: 10px; text-align: center; color: #666; font-style: italic;';
        moreItem.textContent = `... and ${imageFiles.length - 20} more files`;
        fileList.appendChild(moreItem);
      }
      
      const skippedFiles = totalFiles - imageFiles.length;
      let countText = `${imageFiles.length} image file(s) ready for import`;
      if (skippedFiles > 0) {
        countText += ` (${skippedFiles} non-image file(s) will be skipped)`;
      }
      fileCount.textContent = countText;
      
      filePreview.style.display = 'block';
      importButton.disabled = false;
    } else {
      fileCount.textContent = `No valid image files found in selected directory (${totalFiles} file(s) will be skipped)`;
      fileList.innerHTML = '<p style="color: #666; font-style: italic;">No valid image files (.jpg, .png, .gif, .bmp, .tiff, .webp, .heic) found in the selected directory.</p>';
      filePreview.style.display = 'block';
      importButton.disabled = true;
    }
  });
  
  function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }
  
  // Handle form submission with proper chunked uploads
  document.getElementById('import-photos-form').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const files = directoryInput.files;
    if (!files || files.length === 0) {
      alert('Please select a directory containing photos.');
      return;
    }
    
    // Filter to image files only
    const validExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff', '.tif', '.webp', '.heic', '.heif'];
    const imageFiles = Array.from(files).filter(file => {
      const fileName = file.name.toLowerCase();
      return validExtensions.some(ext => fileName.endsWith(ext)) && file.type.startsWith('image/');
    });
    
    if (imageFiles.length === 0) {
      alert('No valid image files selected for import.');
      return;
    }
    
    // Show immediate feedback
    showUploadFeedback(imageFiles.length);
    
    // Start chunked upload (user stays on page)
    startChunkedUpload(imageFiles);
  });
  
  let uploadInProgress = false;
  let uploadCancelled = false;
  let currentUploadController = null;

  function startChunkedUpload(files) {
    const chunkSize = 10; // Smaller chunks to avoid multipart limits
    const totalFiles = files.length;
    let uploadedCount = 0;
    let errorCount = 0;
    let currentChunk = 0;
    const totalChunks = Math.ceil(totalFiles / chunkSize);
    
    uploadInProgress = true;
    uploadCancelled = false;
    
    // Add beforeunload warning to prevent accidental navigation
    const beforeUnloadHandler = function(e) {
      if (uploadInProgress) {
        e.preventDefault();
        e.returnValue = 'Upload in progress. Are you sure you want to leave?';
        return 'Upload in progress. Are you sure you want to leave?';
      }
    };
    window.addEventListener('beforeunload', beforeUnloadHandler);
    
    // Store handler reference for cleanup
    window.currentBeforeUnloadHandler = beforeUnloadHandler;
    
    function uploadChunk(startIndex) {
      if (uploadCancelled) {
        console.log('Upload cancelled by user');
        return;
      }
      
      const endIndex = Math.min(startIndex + chunkSize, totalFiles);
      const chunkFiles = files.slice(startIndex, endIndex);
      currentChunk = Math.floor(startIndex / chunkSize) + 1;
      
      updateUploadFeedback(uploadedCount, totalFiles, `Uploading batch ${currentChunk} of ${totalChunks}...`);
      
      const formData = new FormData();
      
      // Add files to form data
      chunkFiles.forEach(file => {
        formData.append('photos[][file]', file);
      });
      
      // Add CSRF token
      const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
      formData.append('authenticity_token', csrfToken);
      
      // Create abort controller for this request
      currentUploadController = new AbortController();
      
      // Upload this chunk
      fetch('/family/photos/import_photos', {
        method: 'POST',
        body: formData,
        signal: currentUploadController.signal
      }).then(response => {
        if (response.ok) {
          return response.json();
        } else {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
      }).then(data => {
        if (data.status === 'success') {
          uploadedCount += chunkFiles.length;
          updateUploadFeedback(uploadedCount, totalFiles, `Batch ${currentChunk} completed successfully`);
          
          // Continue with next chunk
          if (endIndex < totalFiles && !uploadCancelled) {
            setTimeout(() => uploadChunk(endIndex), 1000); // 1 second delay between chunks
          } else if (endIndex >= totalFiles) {
            // Upload complete
            uploadComplete(uploadedCount, errorCount, totalFiles);
          }
        } else {
          throw new Error(data.message || 'Upload failed');
        }
      }).catch(error => {
        if (error.name === 'AbortError') {
          console.log('Upload aborted');
          return;
        }
        
        errorCount += chunkFiles.length;
        console.error(`Chunk ${currentChunk} failed:`, error);
        updateUploadFeedback(uploadedCount, totalFiles, `Batch ${currentChunk} failed: ${error.message}`);
        
        // Continue with next chunk even if this one failed
        if (endIndex < totalFiles && !uploadCancelled) {
          setTimeout(() => uploadChunk(endIndex), 2000); // Longer delay after error
        } else if (endIndex >= totalFiles) {
          uploadComplete(uploadedCount, errorCount, totalFiles);
        }
      });
    }
    
    // Start uploading
    uploadChunk(0);
  }
  
  function uploadComplete(uploaded, errors, total) {
    uploadInProgress = false;
    
    // Remove beforeunload warning
    if (window.currentBeforeUnloadHandler) {
      window.removeEventListener('beforeunload', window.currentBeforeUnloadHandler);
      window.currentBeforeUnloadHandler = null;
    }
    
    const feedback = document.getElementById('upload-feedback');
    if (feedback) {
      if (errors === 0) {
        feedback.innerHTML = `
          <div style="background: #d4edda; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #28a745;">
            <h3 style="margin: 0 0 15px 0; color: #155724;">✅ Upload Complete!</h3>
            <p style="color: #155724; margin-bottom: 10px;">Successfully uploaded ${uploaded} files.</p>
            <p style="color: #666; font-size: 13px;">Processing photos in the background. You can monitor progress on the dashboard.</p>
            <div style="margin-top: 15px;">
              <button onclick="window.location.href='/family'" style="background: #28a745; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer;">Go to Dashboard</button>
            </div>
          </div>
        `;
      } else {
        feedback.innerHTML = `
          <div style="background: #f8d7da; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #dc3545;">
            <h3 style="margin: 0 0 15px 0; color: #721c24;">⚠️ Upload Completed with Errors</h3>
            <p style="color: #721c24; margin-bottom: 10px;">Uploaded ${uploaded} files, ${errors} failed.</p>
            <p style="color: #666; font-size: 13px;">Some files may have failed to upload. Check the dashboard for details.</p>
            <div style="margin-top: 15px;">
              <button onclick="window.location.href='/family'" style="background: #dc3545; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer;">Go to Dashboard</button>
            </div>
          </div>
        `;
      }
    }
  }
  
  function cancelUpload() {
    if (uploadInProgress) {
      uploadCancelled = true;
      if (currentUploadController) {
        currentUploadController.abort();
      }
      
      const feedback = document.getElementById('upload-feedback');
      if (feedback) {
        feedback.innerHTML = `
          <div style="background: #fff3cd; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #ffc107;">
            <h3 style="margin: 0 0 15px 0; color: #856404;">⏹️ Upload Cancelled</h3>
            <p style="color: #856404; margin-bottom: 10px;">Upload was cancelled by user.</p>
            <div style="margin-top: 15px;">
              <button onclick="location.reload()" style="background: #ffc107; color: #856404; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer;">Try Again</button>
            </div>
          </div>
        `;
      }
      
      // Re-enable form
      const form = document.getElementById('import-photos-form');
      if (form) {
        form.style.opacity = '1';
        form.style.pointerEvents = 'auto';
      }
    }
  }
  
  function updateUploadFeedback(uploaded, total, message) {
    const progressBar = document.getElementById('upload-progress-bar');
    const progressText = document.getElementById('upload-progress-text');
    
    if (progressBar && progressText) {
      const percentage = Math.round((uploaded / total) * 100);
      progressBar.style.width = percentage + '%';
      progressBar.textContent = percentage + '%';
      progressText.textContent = `${message} (${uploaded}/${total} files - ${percentage}%)`;
    }
  }
  
  function showUploadFeedback(totalFiles) {
    // Hide file preview
    filePreview.style.display = 'none';
    
    // Create upload feedback UI
    const uploadFeedback = document.createElement('div');
    uploadFeedback.id = 'upload-feedback';
    uploadFeedback.innerHTML = `
      <div style="background: #e8f4fd; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #007cba;">
        <h3 style="margin: 0 0 15px 0; color: #007cba;">📸 Photo Import in Progress</h3>
        <div style="background: #ffffff; border-radius: 10px; overflow: hidden; height: 24px; margin-bottom: 15px; border: 1px solid #007cba;">
          <div id="upload-progress-bar" style="background: linear-gradient(90deg, #007cba, #0056a3); height: 100%; width: 0%; transition: width 0.3s ease; display: flex; align-items: center; justify-content: center; color: white; font-size: 12px; font-weight: bold;"></div>
        </div>
        <div id="upload-progress-text" style="color: #007cba; font-size: 14px; margin-bottom: 10px;">Preparing upload...</div>
        <div style="color: #666; font-size: 13px; margin-top: 15px;">
          <p>⚠️ <strong>Please stay on this page until upload completes</strong></p>
          <p>📁 Uploading ${totalFiles} files in small batches</p>
          <p>⏱️ This may take a few minutes for large directories</p>
        </div>
        <div id="upload-cancel" style="margin-top: 15px;">
          <button type="button" onclick="cancelUpload()" style="background: #dc3545; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer;">Cancel Upload</button>
        </div>
      </div>
    `;
    
    // Insert after the form
    const form = document.getElementById('import-photos-form');
    form.insertAdjacentElement('afterend', uploadFeedback);
    
    // Disable form
    form.style.opacity = '0.3';
    form.style.pointerEvents = 'none';
  }
});
</script>