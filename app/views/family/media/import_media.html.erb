<div id="title_bar">
  <div id="titlebar_left">
    <h2 id="page_title">Import Media</h2>
  </div>
  <div id="titlebar_right">
    <%= link_to "Back to Media", family_media_path, class: "button" %>
  </div>
</div>

<div class="import_media_form">
  <%= form_with url: import_media_family_media_path, method: :post, multipart: true, local: true, html: { id: 'import-media-form' } do |f| %>
    
    <div class="panel">
      <h3>Select Media Files to Import</h3>
      <p>Choose a folder containing media files. Files will be filtered based on your type selection below.</p>
      
      <div class="form_group">
        <label for="media-type-selection">Media Types to Import:</label>
        <div id="media-type-selection" style="margin: 10px 0;">
          <label style="display: inline-block; margin-right: 20px;">
            <input type="radio" name="media_types[]" value="all" checked style="margin-right: 5px;">
            All Media Types
          </label>
          <label style="display: inline-block; margin-right: 20px;">
            <input type="radio" name="media_types[]" value="photo" style="margin-right: 5px;">
            Photos Only
          </label>
          <label style="display: inline-block; margin-right: 20px;">
            <input type="radio" name="media_types[]" value="audio" style="margin-right: 5px;">
            Audio Only
          </label>
          <label style="display: inline-block; margin-right: 20px;">
            <input type="radio" name="media_types[]" value="video" style="margin-right: 5px;">
            Video Only
          </label>
        </div>
      </div>
      
      <div class="form_group">
        <label for="directory-input">Select Directory:</label>
        <input type="file" 
               id="directory-input" 
               name="media_files[]"
               webkitdirectory 
               directory 
               multiple 
               accept="image/*,audio/*,video/*"
               style="margin: 10px 0;"
               required>
      </div>
      
      <div id="file-preview" style="margin: 20px 0; display: none;">
        <h4>Files Selected:</h4>
        <div id="file-list" style="max-height: 300px; overflow-y: auto; border: 1px solid #ddd; padding: 10px; background: #f9f9f9;">
        </div>
        <p id="file-count" style="font-weight: bold; margin-top: 10px;"></p>
      </div>
      
      <div class="form_actions">
        <%= f.submit "Import Media", class: "btn btn-primary", id: "import-button", disabled: true %>
        <%= link_to "Cancel", family_media_path, class: "btn btn-secondary" %>
      </div>
    </div>
    
  <% end %>
</div>

<style>
.import_media_form {
  max-width: 800px;
  margin: 20px auto;
}

.panel {
  background: white;
  padding: 20px;
  border-radius: 5px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.form_group {
  margin: 15px 0;
}

.form_group label {
  display: block;
  font-weight: bold;
  margin-bottom: 5px;
}

.form_actions {
  margin-top: 20px;
  text-align: right;
}

.btn {
  padding: 10px 20px;
  margin: 0 5px;
  border: none;
  border-radius: 3px;
  cursor: pointer;
  text-decoration: none;
  display: inline-block;
}

.btn-primary {
  background: #007cba;
  color: white;
}

.btn-primary:disabled {
  background: #cccccc;
  cursor: not-allowed;
}

.btn-secondary {
  background: #6c757d;
  color: white;
}

.btn:hover:not(:disabled) {
  opacity: 0.9;
}

.file-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 8px 12px;
  border-bottom: 1px solid #eee;
  background: white;
  margin: 2px 0;
  border-radius: 3px;
}

.file-name {
  flex: 1;
  font-size: 13px;
  word-break: break-all;
}

.file-type {
  font-size: 11px;
  background: #007cba;
  color: white;
  padding: 2px 6px;
  border-radius: 3px;
  margin: 0 5px;
}

.file-size {
  font-size: 12px;
  color: #666;
  margin-left: 10px;
  white-space: nowrap;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const directoryInput = document.getElementById('directory-input');
  const filePreview = document.getElementById('file-preview');
  const fileList = document.getElementById('file-list');
  const fileCount = document.getElementById('file-count');
  const importButton = document.getElementById('import-button');
  const mediaTypeInputs = document.querySelectorAll('input[name="media_types[]"]');
  
  let currentFiles = [];
  
  // Media type definitions
  const mediaTypes = {
    photo: {
      extensions: ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff', '.tif', '.webp', '.heic', '.heif'],
      mimeTypes: ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/bmp', 'image/tiff', 'image/heic', 'image/heif', 'image/webp'],
      emoji: '📸'
    },
    audio: {
      extensions: ['.mp3', '.wav', '.aac', '.ogg', '.flac', '.m4a'],
      mimeTypes: ['audio/mpeg', 'audio/mp3', 'audio/wav', 'audio/aac', 'audio/ogg', 'audio/flac'],
      emoji: '🎵'
    },
    video: {
      extensions: ['.mp4', '.mov', '.avi', '.mkv', '.webm'],
      mimeTypes: ['video/mp4', 'video/mov', 'video/avi', 'video/mkv', 'video/webm'],
      emoji: '🎬'
    }
  };

  function getFileType(file) {
    const fileName = file.name.toLowerCase();
    const mimeType = file.type.toLowerCase();
    
    for (const [type, config] of Object.entries(mediaTypes)) {
      if (config.mimeTypes.includes(mimeType) || 
          config.extensions.some(ext => fileName.endsWith(ext))) {
        return type;
      }
    }
    return null;
  }

  function filterFilesBySelection() {
    const selectedType = document.querySelector('input[name="media_types[]"]:checked').value;
    
    if (selectedType === 'all') {
      return currentFiles.map(file => ({ file, type: getFileType(file) })).filter(item => item.type);
    } else {
      return currentFiles.map(file => ({ file, type: getFileType(file) }))
                       .filter(item => item.type === selectedType);
    }
  }

  function updateFilePreview() {
    if (currentFiles.length === 0) {
      filePreview.style.display = 'none';
      importButton.disabled = true;
      return;
    }

    const filteredFiles = filterFilesBySelection();
    
    if (filteredFiles.length > 0) {
      fileList.innerHTML = '';
      
      // Show first 20 files as preview
      const previewFiles = filteredFiles.slice(0, 20);
      previewFiles.forEach(item => {
        const fileItem = document.createElement('div');
        fileItem.className = 'file-item';
        
        const fileName = document.createElement('span');
        fileName.className = 'file-name';
        fileName.textContent = item.file.webkitRelativePath || item.file.name;
        
        const fileType = document.createElement('span');
        fileType.className = 'file-type';
        fileType.textContent = `${mediaTypes[item.type].emoji} ${item.type}`;
        
        const fileSize = document.createElement('span');
        fileSize.className = 'file-size';
        fileSize.textContent = formatFileSize(item.file.size);
        
        fileItem.appendChild(fileName);
        fileItem.appendChild(fileType);
        fileItem.appendChild(fileSize);
        fileList.appendChild(fileItem);
      });
      
      if (filteredFiles.length > 20) {
        const moreItem = document.createElement('div');
        moreItem.style.cssText = 'padding: 10px; text-align: center; color: #666; font-style: italic;';
        moreItem.textContent = `... and ${filteredFiles.length - 20} more files`;
        fileList.appendChild(moreItem);
      }
      
      const totalFiles = currentFiles.length;
      const skippedFiles = totalFiles - filteredFiles.length;
      let countText = `${filteredFiles.length} file(s) ready for import`;
      if (skippedFiles > 0) {
        countText += ` (${skippedFiles} file(s) will be skipped)`;
      }
      fileCount.textContent = countText;
      
      filePreview.style.display = 'block';
      importButton.disabled = false;
    } else {
      const totalFiles = currentFiles.length;
      fileCount.textContent = `No valid files found for selected type (${totalFiles} file(s) will be skipped)`;
      fileList.innerHTML = '<p style="color: #666; font-style: italic;">No valid files found for the selected media type.</p>';
      filePreview.style.display = 'block';
      importButton.disabled = true;
    }
  }

  directoryInput.addEventListener('change', function(e) {
    currentFiles = Array.from(e.target.files);
    updateFilePreview();
  });

  // Update preview when media type selection changes
  mediaTypeInputs.forEach(input => {
    input.addEventListener('change', updateFilePreview);
  });

  function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  // Handle form submission (similar to photos import but more generic)
  document.getElementById('import-media-form').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const files = directoryInput.files;
    if (!files || files.length === 0) {
      alert('Please select a directory containing media files.');
      return;
    }
    
    const filteredFiles = filterFilesBySelection();
    if (filteredFiles.length === 0) {
      alert('No valid media files selected for import.');
      return;
    }
    
    // Show immediate feedback
    showUploadFeedback(filteredFiles.length);
    
    // Start chunked upload
    startChunkedUpload(filteredFiles.map(item => item.file));
  });

  // ... rest of upload functions similar to photos import but using media endpoints
  let uploadInProgress = false;
  let uploadCancelled = false;
  let currentUploadController = null;
  let uploadStartTime = null;

  function startChunkedUpload(files) {
    uploadStartTime = Date.now(); // Record start time
    const chunkSize = 10;
    const totalFiles = files.length;
    let uploadedCount = 0;
    let errorCount = 0;
    let currentChunk = 0;
    const totalChunks = Math.ceil(totalFiles / chunkSize);
    
    uploadInProgress = true;
    uploadCancelled = false;
    
    function uploadChunk(startIndex) {
      if (uploadCancelled) return;
      
      const endIndex = Math.min(startIndex + chunkSize, totalFiles);
      const chunkFiles = files.slice(startIndex, endIndex);
      currentChunk = Math.floor(startIndex / chunkSize) + 1;
      
      updateUploadFeedback(uploadedCount, totalFiles, `Uploading batch ${currentChunk} of ${totalChunks}...`);
      
      const formData = new FormData();
      
      // Add selected media types
      const selectedType = document.querySelector('input[name="media_types[]"]:checked').value;
      formData.append('media_types[]', selectedType);
      
      // Add files to form data
      chunkFiles.forEach(file => {
        formData.append('media_files[]', file);
      });
      
      // Add CSRF token
      const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
      formData.append('authenticity_token', csrfToken);
      
      // Mark if this is the final batch
      const isFinalBatch = endIndex >= totalFiles;
      formData.append('is_final_batch', isFinalBatch.toString());
      
      currentUploadController = new AbortController();
      
      fetch('/family/media/import_media', {
        method: 'POST',
        body: formData,
        signal: currentUploadController.signal
      }).then(response => {
        if (response.ok) {
          return response.json();
        } else {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
      }).then(data => {
        if (data.status === 'success') {
          uploadedCount += chunkFiles.length;
          updateUploadFeedback(uploadedCount, totalFiles, `Batch ${currentChunk} completed successfully`);
          
          if (endIndex < totalFiles && !uploadCancelled) {
            setTimeout(() => uploadChunk(endIndex), 1000);
          } else if (endIndex >= totalFiles) {
            uploadComplete(uploadedCount, errorCount, totalFiles);
          }
        } else {
          throw new Error(data.message || 'Upload failed');
        }
      }).catch(error => {
        if (error.name === 'AbortError') return;
        
        errorCount += chunkFiles.length;
        console.error(`Chunk ${currentChunk} failed:`, error);
        updateUploadFeedback(uploadedCount, totalFiles, `Batch ${currentChunk} failed: ${error.message}`);
        
        if (endIndex < totalFiles && !uploadCancelled) {
          setTimeout(() => uploadChunk(endIndex), 2000);
        } else if (endIndex >= totalFiles) {
          uploadComplete(uploadedCount, errorCount, totalFiles);
        }
      });
    }
    
    uploadChunk(0);
  }

  function formatDuration(milliseconds) {
    const seconds = Math.floor(milliseconds / 1000);
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    
    if (minutes > 0) {
      return `${minutes}m ${remainingSeconds}s`;
    } else {
      return `${remainingSeconds}s`;
    }
  }

  function uploadComplete(uploaded, errors, total) {
    uploadInProgress = false;
    const duration = uploadStartTime ? Date.now() - uploadStartTime : 0;
    const durationText = formatDuration(duration);
    
    const feedback = document.getElementById('upload-feedback');
    if (feedback) {
      if (errors === 0) {
        feedback.innerHTML = `
          <div style="background: #d4edda; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #28a745;">
            <h3 style="margin: 0 0 15px 0; color: #155724;">✅ Upload Complete!</h3>
            <p style="color: #155724; margin-bottom: 10px;">Successfully uploaded ${uploaded} media files in ${durationText}.</p>
            <div style="margin-top: 15px;">
              <button onclick="window.location.href='/family/media'" style="background: #28a745; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer;">Go to Media</button>
            </div>
          </div>
        `;
      } else {
        feedback.innerHTML = `
          <div style="background: #f8d7da; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #dc3545;">
            <h3 style="margin: 0 0 15px 0; color: #721c24;">⚠️ Upload Completed with Errors</h3>
            <p style="color: #721c24; margin-bottom: 10px;">Uploaded ${uploaded} files, ${errors} failed. Duration: ${durationText}.</p>
            <div style="margin-top: 15px;">
              <button onclick="window.location.href='/family/media'" style="background: #dc3545; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer;">Go to Media</button>
            </div>
          </div>
        `;
      }
    }
  }

  function updateUploadFeedback(uploaded, total, message) {
    const progressBar = document.getElementById('upload-progress-bar');
    const progressText = document.getElementById('upload-progress-text');
    
    if (progressBar && progressText) {
      const percentage = Math.round((uploaded / total) * 100);
      progressBar.style.width = percentage + '%';
      progressBar.textContent = percentage + '%';
      progressText.textContent = `${message} (${uploaded}/${total} files - ${percentage}%)`;
    }
  }

  function showUploadFeedback(totalFiles) {
    filePreview.style.display = 'none';
    
    const uploadFeedback = document.createElement('div');
    uploadFeedback.id = 'upload-feedback';
    uploadFeedback.innerHTML = `
      <div style="background: #e8f4fd; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #007cba;">
        <h3 style="margin: 0 0 15px 0; color: #007cba;">📁 Media Import in Progress</h3>
        <div style="background: #ffffff; border-radius: 10px; overflow: hidden; height: 24px; margin-bottom: 15px; border: 1px solid #007cba;">
          <div id="upload-progress-bar" style="background: linear-gradient(90deg, #007cba, #0056a3); height: 100%; width: 0%; transition: width 0.3s ease; display: flex; align-items: center; justify-content: center; color: white; font-size: 12px; font-weight: bold;"></div>
        </div>
        <div id="upload-progress-text" style="color: #007cba; font-size: 14px; margin-bottom: 10px;">Preparing upload...</div>
        <div style="color: #666; font-size: 13px; margin-top: 15px;">
          <p>⚠️ <strong>Please stay on this page until upload completes</strong></p>
          <p>📁 Uploading ${totalFiles} files in small batches</p>
        </div>
      </div>
    `;
    
    const form = document.getElementById('import-media-form');
    form.insertAdjacentElement('afterend', uploadFeedback);
    form.style.opacity = '0.3';
    form.style.pointerEvents = 'none';
  }
});
</script>
